{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","vh","window","innerHeight","document","documentElement","style","setProperty","serverURL","session","match","params","useState","active","setActive","type","message","alert","setAlert","useEffect","fetch","method","headers","then","response","ok","json","status","catch","error","className","onClick","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","body","JSON","stringify","sendLocation","Boolean","location","hostname","ReactDOM","render","path","component","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"mSAiGeA,MA9Ff,SAAaC,GAEX,IAAIC,EAA0B,IAArBC,OAAOC,YAChBC,SAASC,gBAAgBC,MAAMC,YAAY,OAA3C,UAAsDN,EAAtD,OAEA,IAAMO,EAAY,8CACZC,EAAUT,EAAMU,MAAMC,OAAOF,QANjB,EAQUG,oBAAS,GARnB,mBAQXC,EARW,KAQHC,EARG,OASQF,mBAAS,CAACG,KAAK,GAAIC,QAAQ,KATnC,mBASXC,EATW,KASJC,EATI,KA0ElB,OAJAC,qBAAU,WAzDRC,MAAM,GAAD,OAAIZ,EAAJ,0BAA+BC,GAAW,CAC7CY,OAAQ,MACRC,QAAS,CAAC,eAAgB,sBACzBC,MAAK,SAAAC,GAIN,OAHKA,EAASC,IACZP,EAAS,CAACH,KAAK,eAAgBC,QAAQ,wCAElCQ,KACND,MAAK,SAAAC,GACN,OAAOA,EAASE,UACfH,MAAK,SAAAG,GACc,WAAhBA,EAAKC,OACPb,GAAU,GAEVI,EAAS,CAACH,KAAK,eAAgBC,QAAQ,2CAExCY,OAAM,SAAAC,GACPX,EAAS,CAACH,KAAK,eAAgBC,QAAQ,6CA0CxC,IAGD,yBAAKc,UAAU,eACb,yBAAKA,UAAU,cACb,yCAEF,yBAAKA,UAAU,aACZb,EAAMF,KAAO,yBAAKe,UAAS,yBAAoBb,EAAMF,OACtC,6BACE,yBAAKe,UAAU,eAAeb,EAAMD,SACpC,yBAAKc,UAAU,oBAAmB,4BAAQC,QAAS,kBAAMb,EAAS,CAACH,KAAK,GAAIC,QAAQ,OAAlD,QAE7B,MAExBH,EAAS,yBAAKiB,UAAU,cACb,4BAAQC,QAAS,kBAtDZ,WAEnBb,EAAS,CAACH,KAAK,aAAcC,QAAQ,6BA2BhCgB,UAAUC,YAGbD,UAAUC,YAAYC,oBA5BR,SAACC,GACf,IAAMC,EAAWD,EAASE,OAAOD,SAC3BE,EAAYH,EAASE,OAAOC,UAElClB,MAAM,GAAD,OAAIZ,EAAJ,iBAA8B,CACjCa,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BiB,KAAMC,KAAKC,UAAU,CAAC,YAAehC,EAAS,IAAO2B,EAAU,KAAQE,MACtEf,MAAK,SAAAC,GAIN,OAHKA,EAASC,IACZP,EAAS,CAACH,KAAK,eAAgBC,QAAQ,kCAElCQ,KACND,MAAK,SAAAC,GACNN,EAAS,CAACH,KAAK,gBAAiBC,QAAQ,6CACvCY,OAAM,SAAAC,GACPX,EAAS,CAACH,KAAK,eAAgBC,QAAQ,wCAK7B,WACZE,EAAS,CAACH,KAAK,eAAgBC,QAAQ,oCAIvCE,EAAS,CAACH,KAAK,eAAgBC,QAAQ,iCAwBJ0B,KAAgB,sDAChC,OChFLC,QACW,cAA7BzC,OAAO0C,SAASC,UAEe,UAA7B3C,OAAO0C,SAASC,UAEhB3C,OAAO0C,SAASC,SAASnC,MACvB,2D,YCTNoC,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,YAAYC,UAAWlD,KAEzCK,SAAS8C,eAAe,SDoHpB,kBAAmBlB,WACrBA,UAAUmB,cAAcC,MAAM7B,MAAK,SAAA8B,GACjCA,EAAaC,kB","file":"static/js/main.b2bf5464.chunk.js","sourcesContent":["import React,{useState, useEffect} from 'react';\n\n\nfunction App(props) {\n\n  let vh = window.innerHeight * 0.01;\n  document.documentElement.style.setProperty('--vh', `${vh}px`);\n\n  const serverURL = 'https://immense-citadel-99283.herokuapp.com';\n  const session = props.match.params.session;\n\n  const [active, setActive] = useState(false)\n  const [alert, setAlert] = useState({type:'', message:''})\n\n  \n  const checkActive = () => {\n    fetch(`${serverURL}/sessionstatus/${session}`, {\n      method: 'GET',\n      headers: {'Content-Type': 'application/json'}\n    }).then(response => {\n      if (!response.ok) {\n        setAlert({type:'alert-danger', message:'URL does not exist or is not Active'})\n      }\n      return response\n    }).then(response => {\n      return response.json()\n    }).then(json => {\n      if (json.status === 'ACTIVE') {\n        setActive(true)\n      } else {\n        setAlert({type:'alert-danger', message:'URL does not exist or is not Active'})\n      }\n    }).catch(error => {\n      setAlert({type:'alert-danger', message:'URL does not exist or is not Active'})\n    })\n  }\n\n  const sendLocation = () => {\n\n    setAlert({type:'alert-info', message:'Sending your location...'})\n\n    const success = (position) => {\n      const latitude = position.coords.latitude\n      const longitude = position.coords.longitude\n\n      fetch(`${serverURL}/add-location`, {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({\"sessionname\": session, \"lat\": latitude, \"long\": longitude})\n      }).then(response => {\n        if (!response.ok) {\n          setAlert({type:'alert-danger', message:'Unable to send your location.'})\n        }\n        return response\n      }).then(response => {\n        setAlert({type:'alert-success', message:'Success! Thank you for participating!'})\n      }).catch(error => {\n        setAlert({type:'alert-danger', message:'Unable to send your location.'})\n      })\n\n    }\n\n    const error = () => {\n      setAlert({type:'alert-danger', message:'Unable to retrieve location.'})\n    }\n\n    if (!navigator.geolocation) {\n      setAlert({type:'alert-danger', message:'Unable to retrieve location.'})\n    } else {\n      navigator.geolocation.getCurrentPosition(success,error)\n    }\n  }\n\n  useEffect(() => {\n    checkActive()\n  }, [])\n  \n  return (\n    <div className=\"addLocation\">\n      <div className=\"header-div\">\n        <h1>Walkable</h1>\n      </div>\n      <div className=\"alert-div\">\n        {alert.type ? <div className={`walkable-alert ${alert.type}`}>\n                        <div>\n                          <div className=\"message-div\">{alert.message}</div>\n                          <div className=\"close-button-div\"><button onClick={() => setAlert({type:'', message:''})}>x</button></div>\n                        </div>\n                      </div> : null}\n      </div>\n      {active ? <div className=\"button-div\">\n                  <button onClick={() => sendLocation()}><h1>I Want To Cross Here</h1></button>\n                </div> : null}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter, Route} from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './css/bootstrap431/css/bootstrap.min.css';\nimport './css/styles.css';\n\nReactDOM.render(\n    <BrowserRouter>\n        <Route path=\"/:session\" component={App} />\n    </BrowserRouter>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}